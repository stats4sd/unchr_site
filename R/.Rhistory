br()
),
class = "display"
)
}
## Chart
observe({
output$chart <- renderPlot({
charts <-ggplot(data = selectedData(), aes(x=year, y=indicator_value)) +
geom_line(size = 2, alpha = 0.75) +
geom_point(size =3, alpha = 0.75)
charts
})
})
##end server
}
)
runApp('appSdg.R')
mtcars
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
View(output)
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
runApp('appSdg.R')
sdg_code_list <- unique(indicators$sdg_code)
runApp('appSdg.R')
library(DBI)
library(DT)
library(ggplot2)
library(maps)
library(ggthemes)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- unique(setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': '))))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp('appData.R')
View(data_table)
runApp('appData.R')
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- unique(setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': '))))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
runApp('appSdg.R')
library(DBI)
library(DT)
library(ggplot2)
library(maps)
library(ggthemes)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- unique(setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': '))))
#sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
sdg_list <- (setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': '))))
sdg_list <- (setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': '))))
sdg_list <- (setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': '))))
sdg_list <- setNames(indicators$sdg_code,as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <-unique(sdg_list)
runApp('appSdg.R')
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': ')))
library(DBI)
library(DT)
library(ggplot2)
library(maps)
library(ggthemes)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(indicators$sdg_code, indicators$sdg_description, sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp('appSdg.R')
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
sdg_list[!is.na(sdg_list)]
runApp()
packrat::restore()
runApp('C:/Users/LuciaFalcinelli/Dropbox (SSD)/ssd-shiny-server/unhcr-site')
runApp('C:/Users/LuciaFalcinelli/Dropbox (SSD)/ssd-shiny-server/unhcr-site')
library(DBI)
library(dotenv)
#Include databasename, user and password
load_dot_env(file = "../.env")
con <- dbConnect(RMySQL::MySQL(),
dbname = Sys.getenv('DB_DATABASE'),
host = Sys.getenv('DB_HOST'),
port = as.numeric(Sys.getenv('DB_PORT')),
user = Sys.getenv('DB_USERNAME'),
password = Sys.getenv('DB_PASSWORD')
)
runApp('C:/Users/LuciaFalcinelli/Dropbox (SSD)/ssd-shiny-server/unhcr-site')
shiny::runApp('C:/Users/LuciaFalcinelli/Dropbox (SSD)/ssd-shiny-server/unhcr-site')
shiny::runApp()
runApp()
runApp()
runApp()
output$chartSdgsGroup <- renderPlot({
charts <-ggplot(data = ChartSdgsGroup(), aes(x=year, y=indicator_value)) +
geom_line(aes(color = sdg_code, linetype= sdg_code)) +
geom_point(size = 3, alpha = 0.75) +
labs(y="sdg indicators", x = "years")+
ggtitle("SDG Indicators by Subset") +
scale_x_continuous(breaks=years)
charts
})
runApp()
runApp()
install.packages("shinyjs")
runApp()
install.packages("shinyjs")
runApp()
install.packages("shinyjs")
runApp()
install.packages("shinyjs")
runApp()
runApp()
runApp()
install.packages("shinyjs")
library(shinyjs)
R
R --version
R -version
runApp()
runApp()
shinyjs::toggle
help(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name, group_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name, group_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp()
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% group_by(group_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
View(indicators)
View(indicators_num)
runApp()
runApp()
runApp()
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% group_by(group_name) %>% summarise('indicator_num'= n()) %>% mutate(countries_name = countries_name)
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
runApp()
