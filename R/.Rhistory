})
ret <- list(plots = plots, frames = frames)
class(ret) <- "gganimate"
if (!is.null(filename)) {
ret <- gganimate_save(ret, filename, saver, ...)
} else {
ret$ani_opts <- list(...)
ret$saved <- FALSE
}
ret
}
#' @param format What format to display in, such as "gif" (default),
#' "mp4", or "avi".
#' @param ... Extra arguments for the <img> or <video> tag, such
#' as width or height
#'
#' This saves the plot to a file using \code{\link{gganimate_save}}
#' (and then loads the contents of that file into memory) if it has
#' not already been saved.
#'
#' @export
print.gganimate <- function(x, format = "gif", ...) {
# if knitr is running, use a special case. Print all figures
if (!(is.null(getOption("knitr.in.progress")))) {
# don't print if it has already been saved
if (!x$saved) {
for (pl in x$plots) {
plot_ggplot_build(pl)
}
}
return()
}
# if it has not yet been saved to a file, save now (to a temporary file)
if (!x$saved) {
x <- do.call(gganimate_save, c(list(x, saver = format), x$ani_opts))
}
# construct HTML
if (!is.null(x$mime_type) && grepl("^video", x$mime_type)) {
d <- htmltools::tags$video(htmltools::tags$source(src = x$src),
autoplay = TRUE,
loop = TRUE, ...)
} else if (!is.null(x$mime_type) && grepl("^image", x$mime_type)) {
d <- htmltools::tags$img(src = x$src, ...)
} else {
message("opening gganimate file stored at ", x$filename)
auto_browse(x$filename)
return()
}
print(htmltools::browsable(d))
}
install.packages(c("animation", "cowplot"))
#' a function from the animation package such as \code{saveVideo}
#' to use for saving. GIFs are saved manually using ImageMagick.
#' @param ... Additional arguments passed on to the saving function,
#' such as \code[pkg=ggplot2]{ggsave} for GIFs or
#' \code[pkg=animate]{saveVideo} for MP4.
#'
#' @details If saving to a GIF, uses a custom method that takes advantage
#' of redundant backgrounds (scales, static layers, etc).
#'
#' @export
gganimate_save <- function(g, filename = NULL, saver = NULL,
fps = 1, loop = 0, ...) {
# save to a temporary file if necessary
if (is.null(filename)) {
if (is.null(saver)) {
filename <- gganimate_tempfile(fileext = ".gif")
} else {
filename <- gganimate_tempfile(fileext = paste0(".", saver))
}
}
# figure out how it should be saved
s <- animation_saver(saver, filename)
# temporarily move to directory (may be current one, that's OK)
# this helps with animation functions like saveGIF that work only in
# current directory
withr::with_dir(dirname(filename), {
if (s$saver == "gif" && FALSE) {
save_gganimate_custom(g, filename = filename, ...)
} else {
s$func(for (pl in g$plots) {
plot_ggplot_build(pl)
}, basename(filename), autobrowse = FALSE, ...)
}
})
g$filename <- filename
if (!is.null(s$mime_type)) {
# if it can be displayed in R, import it as an encoded string
g$src <- base64enc::dataURI(file = filename, mime = s$mime_type)
g$mime_type <- s$mime_type
}
g$saved <- TRUE
g
}
#' Create a temporary file within the temporary directory
#'
#' This is necessary because the animation package often copies
#' to the temporary directory, which leads to animation trying to
#' copy a file to itself.
#'
#' @param pattern the initial part of the name
#' @param fileext file extension
gganimate_tempfile <- function(pattern = "file", fileext = "") {
outdir <- file.path(tempdir(), "gganimate")
dir.create(outdir, showWarnings = FALSE)
tempfile(pattern, outdir, fileext = fileext)
}
#' Plot a built ggplot object
#'
#' We needed a customized version of ggplot2's \code{print.ggplot2},
#' because we need to build plots from the intermediate results of
#' \code{\link{ggplot_build}} rather than from a \code{gg} object.
#'
#' @param b A list resulting from \code{\link{ggplot_build}}
#' @param newpage draw new (empty) page first?
#' @param vp viewport to draw plot in
plot_ggplot_build <- function(b, newpage = is.null(vp), vp = NULL) {
if (newpage) {
grid::grid.newpage()
}
grDevices::recordGraphics(
requireNamespace("ggplot2", quietly = TRUE),
list(),
getNamespace("ggplot2")
)
gtable <- ggplot_gtable(b)
# browser()
if (is.null(vp)) {
grid::grid.draw(gtable)
} else {
if (is.character(vp)) grid::seekViewport(vp) else grid::pushViewport(vp)
grid::grid.draw(gtable)
grid::upViewport()
}
}
install.packages(c("animation", "gapminder", "gganimate"))
install.packages("gganimate")
library(gganimate)
test_check("gganimate")
test_check("gganimate")
datatable(rladies, rownames = FALSE,
options = list(pageLength = 5))
world <- ggplot() +
borders("world", colour = "gray85", fill = "gray80") +
theme_map()
map <- world +
geom_point(aes(x = lon, y = lat, size = followers),
data = rladies,
colour = 'purple', alpha = .5) +
scale_size_continuous(range = c(1, 8),
breaks = c(250, 500, 750, 1000)) +
labs(size = 'Followers')
#use con for connecting to database
indicator_table_db<-dbGetQuery(con,'
select *
from indicator
group by id')
# indicators table from csv
indicator_table <- read.csv("C:/Users/LuciaFalcinelli/Documents/R/unhcr/data/Colombia Iraq SDG indicators for displaced people.csv")
# indicator_table1 for Basic needs and living conditions
indicator_table1<-indicator_table %>% select('Country', 'Year', 'SDG_2.2.1', 'SDG_3.2.1', 'SDG_6.6.1', 'SDG_11.1.1')
# indicator_table2 for Livelihoods and economic self-reliance
indicator_table2<-indicator_table %>% select('Country', 'Year', 'SDG_1.2.1', 'SDG_4.1.1.a.i', 'SDG_7.1.1', 'SDG_8.3.1', 'SDG_8.5.2.male', 'SDG_8.5.2.female')
# indicator_table3 for Livelihoods and economic self-reliance
indicator_table3<-indicator_table %>% select('Country', 'Year', 'SDG_1.4.2.a', 'SDG_1.4.2.b', 'SDG_16.1.4', 'SDG_16.9.1')
runApp('GitHub/unhcr_site/R')
install.packages("leaflet.extras")
runApp('GitHub/unhcr_site/R/available_data.R')
runApp('GitHub/unhcr_site/R/available_data.R')
runApp('available_data.R')
runApp('GitHub/unhcr_site/R/available_data.R')
runApp('available_data.R')
runApp('GitHub/unhcr_site/R/available_data.R')
quakes <- <- read.csv("query.csv")
quakes <- read.csv("query.csv")
runApp()
runApp('GitHub/unhcr_site/R')
View(quakes)
quakes <- read.csv("query.csv")
View(quakes)
View(quakes)
View(quakes)
View(quakes)
View(quakes)
View(quakes)
#available data maps
url_csv <- 'https://raw.githubusercontent.com/d4tagirl/R-Ladies-growth-maps/master/rladies.csv'
runApp('GitHub/unhcr_site/R')
devtools::install_github("Nowosad/spDataLarge")
devtools::install_github("geocompr/geocompkg")
vignette(package = "sf") # see which vignettes are available
vignette(package = "sf") # see which vignettes are available
vignette("sf1")          # an introduction to the package
names(world)
world
world
names(world)
names(world["coordinates"])
names(world["coordinates"])
plot(world)
plot(world)
world$geom
plot(world$geom)
world_mini = world[1:2, 1:3]
world_mini
summary(world["lifeExp"])
library(dplyr)
library(shiny)   # for web applications
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library(shiny)   # for web applications
# Add fill and border layers to nz shape
tm_shape(nz) +
tm_fill() +
tm_borders()
shinyApp(ui, server)
runApp('R/GeographicMaps/geographic_data.R')
runApp('R/GeographicMaps/geographic_data.R')
runApp('R/GeographicMaps/geographic_data.R')
runApp('R/GeographicMaps/geographic_data.R')
library(spDataLarge)
runApp('R/GeographicMaps/geographic_data.R')
runApp('R/GeographicMaps/geographic_data.R')
data(world)
runApp('R/GeographicMaps/geographic_data.R')
runApp('R/GeographicMaps/geographic_data.R')
runApp('R/GeographicMaps/geographic_data.R')
# Add fill layer to nz shape
tm_shape(nz) +
tm_fill()
# Add border layer to nz shape
tm_shape(nz) +
tm_borders()
# Add fill and border layers to nz shape
tm_shape(nz) +
tm_fill() +
tm_borders()
#Map objects
map_nz = tm_shape(nz) + tm_polygons()
class(map_nz)
map_nz1 = map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
map_nz2 = map_nz1 +
tm_shape(nz_water) + tm_lines()
nz_water = st_union(nz) %>% st_buffer(22200) %>%
st_cast(to = "LINESTRING")
map_nz2 = map_nz1 +
tm_shape(nz_water) + tm_lines()
View(nz_water)
map_nz3 = map_nz2 +
tm_shape(nz_height) + tm_dots()
tmap_arrange(map_nz1, map_nz2, map_nz3)
tmap_arrange(map_nz1, map_nz2, map_nz3)
urb_1970_2030 = urban_agglomerations %>%
filter(year %in% c(1970, 1990, 2010, 2030))
tm_shape(world) +
tm_polygons() +
tm_shape(urb_1970_2030) +
tm_symbols(col = "black", border.col = "white", size = "population_millions") +
tm_facets(by = "year", nrow = 2, free.coords = FALSE)
g1
library(ggplot2)
g1 = ggplot() + geom_sf(data = nz, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1
runApp('R/unhcr')
runApp('R/unhcr')
runApp('R/unhcr')
runApp('R/unhcr')
runApp('R/unhcr')
runApp('R/unhcr')
runApp('R/unhcr')
g1 = ggplot() + geom_sf(data = nz, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1 = ggplot() + geom_sf(data = nz, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1 = ggplot() + geom_sf(data = nz, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1
output$g1<-renderPlot({
ggplot(dat(),aes(x=date,y=num))+geom_point(colour='red')},height = 400,width = 600)}
runApp('R/unhcr')
africa = world %>%
filter(continent == "Africa", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
africa = world %>%
filter(continent == "Africa", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
View(africa)
africa = world %>%
filter(continent == "UZB", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
africa = world %>%
filter(continent == "Afghanistan", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
View(africa)
world
africa = world %>%
filter(continent == "Africa", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
View(africa)
world
africa = world %>%
filter(continent == "Asia", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
View(africa)
africa = world %>%
filter(name == "Afghanistan", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
Afghanistan
Afghanistan
africa = world %>%
filter(name == "Afghanistan", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
world
View(world)
africa = world %>%
filter(name_long == "Afghanistan", !is.na(iso_a2)) %>%
left_join(worldbank_df, by = "iso_a2") %>%
dplyr::select(name, subregion, gdpPercap, HDI, pop_growth) %>%
st_transform("+proj=aea +lat_1=20 +lat_2=-23 +lat_0=0 +lon_0=25")
africa
View(africa)
africa = world %>%
filter(name_long == "Afghanistan", !is.na(iso_a2))
View(africa)
runApp('R/unhcr')
runApp()
runApp('R/unhcr')
g1 = ggplot() + geom_sf(data = af, aes(fill = Median_income))
g1 = ggplot() + geom_sf(data = af, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = af, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = af, aes(fill = Median_income)) +
geom_sf(data = af_height) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = af, aes(fill = Median_income))
nz
nz
View(nz)
View(af)
View(it)
View(nz)
View(au)
View(usa)
View(american)
View(america)
View(nz)
View(world)
g1 = ggplot() + geom_sf(data = world, aes(fill = Median_income)) +
geom_sf(data = nz_height) +
scale_x_continuous(breaks = c(170, 175))
runApp('R/unhcr')
g1
g1 = ggplot() + geom_sf(data = world, aes(fill = Median_income)) +
geom_sf(data = pop) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = world, aes(fill = pop)) +
geom_sf(data = pop) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = world, aes(fill = pop)) +
geom_sf(data = pop) +
scale_x_continuous(breaks = c(170, 175))
g1 = ggplot() + geom_sf(data = world, aes(fill = world$pop)) +
geom_sf(data = world$pop) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = world, aes(fill = world$pop)) +
geom_sf(data = world$pop) +
scale_x_continuous(breaks = c(170, 175))
g1 = ggplot() + geom_sf(data = world$geom, aes(fill = world$pop)) +
geom_sf(data = world$pop) +
scale_x_continuous(breaks = c(170, 175))
g1
g1 = ggplot() + geom_sf(data = world$geom, aes(fill = world$pop)) +
geom_sf(data = world$pop) +
scale_x_continuous(breaks = c(170, 175))
View(AF)
View(af)
View(nz)
nz_water[[1]]
packrat::restore()
runApp('GitHub/unhcr_site/R')
library(packrat)
runApp('GitHub/unhcr_site/R')
packrat::restore()
packrat::restore()
n
runApp('GitHub/unhcr_site/R')
runApp('GitHub/unhcr_site/R')
runApp('GitHub/unhcr_site/R')
runApp('GitHub/unhcr_site/R')
runApp('GitHub/unhcr_site/R')
packrat::restore(
source('data.R')
options(shiny.host = '127.0.0.1')
install.packages('dotenv')
runApp('GitHub/unhcr_site/R')
dbname <- Sys.getenv('DB_DATABASE')
runApp('GitHub/unhcr_site/R')
packrate::restore()
packrat::restore()
runApp('GitHub/unhcr_site/R')
runApp('GitHub/unhcr_site/R')
runApp('GitHub/unhcr_site/R')
shiny::runApp('GitHub/unhcr_site/R')
shiny::runApp()
runApp()
#
# # indicator_table2 for Livelihoods and economic self-reliance
# indicator_table2<-indicator_table %>% select('Country', 'Year', 'SDG_1.2.1', 'SDG_4.1.1.a.i', 'SDG_7.1.1', 'SDG_8.3.1', 'SDG_8.5.2.male', 'SDG_8.5.2.female')
#
# # indicator_table3 for Livelihoods and economic self-reliance
indicator_table3<-indicator_table %>% select('Country', 'Year', 'SDG_1.4.2.a', 'SDG_1.4.2.b', 'SDG_16.1.4', 'SDG_16.9.1')
indicator_table
runApp()
indicator_table<-dbGetQuery(con,'
select *
from indicator
group by id
')
runApp('app2.R')
tags$head(
),
h2("Data available into database"),
leafletOutput("available_map"),
absolutePanel(#top = 100, right = 10,
selectInput("country", "Country",
c("select country", unique(as.character(country_table$name)))
)
)
# country table
country_table<-dbGetQuery(con,'
select *
from country')
# country table
country_table<-dbGetQuery(con,'
select *
from countries')
tags$head(
),
h2("Data available into database"),
leafletOutput("available_map"),
absolutePanel(#top = 100, right = 10,
selectInput("country", "Country",
c("select country", unique(as.character(country_table$name)))
)
)
indicator_table<-dbGetQuery(con,'
select *
from contries
group by id
')
indicator_table<-dbGetQuery(con,'
select *
from countries
group by id
')
indicator_table<-dbGetQuery(con,'
select *
from countries
')
runApp()
#use con for connecting to database
indicator_table_db<-dbGetQuery(con,'
select *
from countries
group by id')
#use con for connecting to database
indicator_table_db<-dbGetQuery(con,'
select *
from countries')
runApp()
runApp('app2.R')
runApp()
