add_axis("y", title = "Proportion of defects", title_offset = 50) %>%
bind_shiny("controlChart")
runApp('appSdg.R')
runApp('appSdg.R')
##get years list for the slider range bar
years<-indicators$years
View(indicators)
##get years list for the slider range bar
years<-indicators$year
dbDisconnect(con)
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
library(DBI)
library(DT)
library(ggplot2)
library(maps)
library(ggthemes)
library(dplyr)
source('dbConfig.R')
#available data maps
url_csv <- 'https://raw.githubusercontent.com/d4tagirl/R-Ladies-growth-maps/master/rladies.csv'
rladies <- read.csv(url(url_csv)) %>%
select(-1)
datatable(rladies, rownames = FALSE,
options = list(pageLength = 5))
#use con for connecting to database
indicator_table_db<-dbGetQuery(con,'
select *
from countries')
# country table
country_table<-dbGetQuery(con,'
select *
from countries')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code;
')
indicators$countries_name <- as.factor(indicators$countries_name )
sdg <-quakes  %>% filter(mag<=4)
refugee <-quakes %>% filter(mag>4)
##get years list for the slider range bar
years<-indicators$year
dbDisconnect(con)
##get years list for the slider range bar
years<-indicators$year
View(indicators)
runApp('appSdg.R')
runApp('appSdg.R')
runApp('appSdg.R')
library(DBI)
library(DT)
library(ggplot2)
library(maps)
library(ggthemes)
library(dplyr)
source('dbConfig.R')
#available data maps
url_csv <- 'https://raw.githubusercontent.com/d4tagirl/R-Ladies-growth-maps/master/rladies.csv'
rladies <- read.csv(url(url_csv)) %>%
select(-1)
datatable(rladies, rownames = FALSE,
options = list(pageLength = 5))
#use con for connecting to database
indicator_table_db<-dbGetQuery(con,'
select *
from countries')
# country table
country_table<-dbGetQuery(con,'
select *
from countries')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code;
')
indicators$countries_name <- as.factor(indicators$countries_name )
sdg <-quakes  %>% filter(mag<=4)
refugee <-quakes %>% filter(mag>4)
##get years list for the slider range bar
years<-indicators$year
dbDisconnect(con)
##get years list for the slider range bar
years<-indicators$year
runApp('appSdg.R')
min(years)
max(years)
runApp('appSdg.R')
runApp('appSdg.R')
indicators$year
indicators$latitude
runApp('appSdg.R')
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =5, stroke=FALSE, color = "red",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =5, stroke=FALSE, color = "red",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
library(shiny)
library(leaflet)
library(DT)
library(ggvis)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source('data.R')
options(shiny.host = '127.0.0.1')
options(shiny.port = 8002)
shinyApp(
ui = tagList(
tags$head(
),
## navbarPage
fluidPage(
fluidRow(
column(3,
# Control Panel for the indicators
h3("DISAGGREGATED DATA"),
h4("Availability by Location"),
sliderInput("n",
"Seclect the years:",
min = min(years),
max = max(years),
value = c(min(years), max(years)))
),
column(9,
h2("Map"),
leafletOutput("mymap", height="85vh"),
"Basic needs and living conditions",
#DT::dataTableOutput("tableTab1")
)
)
)
),
server = function(input, output) {
# Create the map
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% addProviderTiles("Esri.WorldStreetMap") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE
)
})
observe({
if(nrow(indicators) > 0) {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =5, stroke=FALSE, color = "red",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
} else {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5)
}
})
## table in main page tab 1
output$tableTab1 = DT::renderDataTable({
DT::datatable(
#indicator_table1,
filter = 'top',
extensions = 'Buttons',
options = list(
dom = 'Blfrtip',
buttons = c(I('colvis'), 'csv'),
text = 'Download',
br()
),
class = "display"
)
})
##end server
}
)
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =5, stroke=FALSE, color = "red",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
if(nrow(indicators) > 0) {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =5, stroke=FALSE, color = "red",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
} else {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5)
}
library(shiny)
library(leaflet)
library(DT)
library(ggvis)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source('data.R')
options(shiny.host = '127.0.0.1')
options(shiny.port = 8002)
shinyApp(
ui = tagList(
tags$head(
),
## navbarPage
fluidPage(
fluidRow(
column(3,
# Control Panel for the indicators
h3("DISAGGREGATED DATA"),
h4("Availability by Location"),
sliderInput("n",
"Seclect the years:",
min = min(years),
max = max(years),
value = c(min(years), max(years)))
),
column(9,
h2("Map"),
leafletOutput("mymap", height="85vh"),
"Basic needs and living conditions",
#DT::dataTableOutput("tableTab1")
)
)
)
),
server = function(input, output) {
# Create the map
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% addProviderTiles("Esri.WorldStreetMap") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE
)
})
observe({
if(nrow(indicators) > 0) {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =5, stroke=FALSE, color = "red",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
} else {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5)
}
})
## table in main page tab 1
output$tableTab1 = DT::renderDataTable({
DT::datatable(
#indicator_table1,
filter = 'top',
extensions = 'Buttons',
options = list(
dom = 'Blfrtip',
buttons = c(I('colvis'), 'csv'),
text = 'Download',
br()
),
class = "display"
)
})
##end server
}
)
library(shiny)
library(leaflet)
library(DT)
library(ggvis)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source('data.R')
options(shiny.host = '127.0.0.1')
options(shiny.port = 8002)
shinyApp(
ui = tagList(
tags$head(
),
## navbarPage
fluidPage(
fluidRow(
column(3,
# Control Panel for the indicators
h3("DISAGGREGATED DATA"),
h4("Availability by Location"),
sliderInput("n",
"Seclect the years:",
min = min(years),
max = max(years),
value = c(min(years), max(years)))
),
column(9,
h2("Map"),
leafletOutput("mymap", height="85vh"),
"Basic needs and living conditions",
#DT::dataTableOutput("tableTab1")
)
)
)
),
server = function(input, output) {
# Create the map
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% addProviderTiles("Esri.WorldStreetMap") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE
)
})
observe({
if(nrow(indicators) > 0) {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =8, stroke=FALSE, color = "blue",
fillOpacity = 0.4, popup = paste("<h5>Structure No.: ",
indicators$year,"</h5><h5> # of Dwellings:  </h5>"))
} else {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5)
}
})
## table in main page tab 1
output$tableTab1 = DT::renderDataTable({
DT::datatable(
#indicator_table1,
filter = 'top',
extensions = 'Buttons',
options = list(
dom = 'Blfrtip',
buttons = c(I('colvis'), 'csv'),
text = 'Download',
br()
),
class = "display"
)
})
##end server
}
)
library(shiny)
library(leaflet)
library(DT)
library(ggvis)
library(dplyr)
library(RColorBrewer)
library(shinythemes)
source('data.R')
options(shiny.host = '127.0.0.1')
options(shiny.port = 8002)
shinyApp(
ui = tagList(
tags$head(
),
## navbarPage
fluidPage(
fluidRow(
column(3,
# Control Panel for the indicators
h3("DISAGGREGATED DATA"),
h4("Availability by Location"),
sliderInput("n",
"Seclect the years:",
min = min(years),
max = max(years),
value = c(min(years), max(years)))
),
column(9,
h2("Map"),
leafletOutput("mymap", height="85vh"),
"Basic needs and living conditions",
#DT::dataTableOutput("tableTab1")
)
)
)
),
server = function(input, output) {
# Create the map
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% addProviderTiles("Esri.WorldStreetMap") %>%
addMiniMap(
tiles = providers$Esri.WorldStreetMap,
toggleDisplay = TRUE
)
})
observe({
if(nrow(indicators) > 0) {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =8, stroke=FALSE, color = "blue",
fillOpacity = 0.4,
popup = paste("<h5><b>Country:</b>",
indicators$countries_name,"</h5><h5> # of Dwellings:  </h5>"))
} else {
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5)
}
})
## table in main page tab 1
output$tableTab1 = DT::renderDataTable({
DT::datatable(
#indicator_table1,
filter = 'top',
extensions = 'Buttons',
options = list(
dom = 'Blfrtip',
buttons = c(I('colvis'), 'csv'),
text = 'Download',
br()
),
class = "display"
)
})
##end server
}
)
runApp('appSdg.R')
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= count(indicator_value))
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= count(indicators))
View(indicators_num)
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= count(indicators))
View(indicators_num)
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= count(nrow(indicators)))
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= count(nrow(indicator_value)))
View(indicators)
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
View(indicators_num)
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(layerId = indicators$id, lng = indicators$longitude,
lat = indicators$latitude, radius =8, stroke=FALSE, color = "blue",
fillOpacity = 0.4,
popup = paste("<h5><b>Country:</b>",
indicators$countries_name, "</h5>",
"<h5><b>Indicators :</b>",as.numeric(subset(indicators_num, countries_name =indicators$countries_name)),"</h5>"))
runApp('appSdg.R')
##count indicators for country
indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
##count indicators for country
indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
View(indicators)
##count indicators for country
indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
View(indicators)
runApp('appSdg.R')
##count indicators for country
indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
##count indicators for country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
View(indicators_num)
