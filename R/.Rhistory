
install.packages("shinyjs")
runApp()
install.packages("shinyjs")
runApp()
install.packages("shinyjs")
runApp()
runApp()
runApp()
install.packages("shinyjs")
library(shinyjs)
R
R --version
R -version
runApp()
runApp()
shinyjs::toggle
help(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name, group_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name, group_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp()
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% group_by(group_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
View(indicators)
View(indicators_num)
runApp()
runApp()
runApp()
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% group_by(group_name) %>% summarise('indicator_num'= n()) %>% mutate(countries_name = countries_name)
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
runApp()
shiny::runApp()
shiny::runApp()
country<-read.csv("C:\Users\LuciaFalcinelli\Desktop\countries.csv")
country<-read.csv("C:\Users\LuciaFalcinelli\Desktop\countries.csv", , header = TRUE)
country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
View(country)
indicators<-dbGetQuery(con,'
UPDATE countries SET latitude = 'country$latitude'
WHERE name =' country&name
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
for (row in country ){
indicators<-dbGetQuery(con,'
UPDATE countries SET latitude = 'country$latitude'
WHERE name =' country&name
';')
}
paste('UPDATE countries SET latitude =', country$latitude)
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =', country&name, ';')
dbGetQuery(con, update)
}
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =', country&name, ';')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ', ';')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ', ';')
country$name
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ', country$name,';')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ', country$name,';')
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ', country$name,';')
dbGetQuery(con, update)
}
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ', country$name,';')
print(update)
#dbGetQuery(con, update)
}
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = '', country$name,'';')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',;')
print(update)
#dbGetQuery(con, update)
}
#indicators
indicators<-dbGetQuery(con,'
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',';')
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',';')
print(update)
paste('UPDATE countries SET latitude =', country$latitude)
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',';')
print(update)
#dbGetQuery(con, update)
}
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',';')
print(update)
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
country$name
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',';')
print(update)
dbGetQuery(con, update)
}
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name == ','"', country$name,'"',';')
print(update)
dbGetQuery(con, update)
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name == ','"', country$name,'"',';')
print(update)
dbGetQuery(con, update)
}
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
country$name
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name == ','"', country$name,'"',';')
print(update)
dbGetQuery(con, update)
}
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_num<-indicators %>% group_by(countries_name) %>% summarise('indicator_num'= n())
indicators<-merge(indicators, indicators_num, by.x= 'countries_name', by.y = 'countries_name')
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
table(country$name)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name == "',country$name,'";')
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name == "',country$name,'";')
print(update)
dbGetQuery(con, update)
}
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
table(country$name)
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name == "',country$name,'";')
print(update)
dbGetQuery(con, update)
}
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name=', "'")
print(update)
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name=', "'")
print(update)
#dbGetQuery(con, update)
}
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name=', "'")
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name=')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name,'"',;')
print(update)
#dbGetQuery(con, update)
}
#indicators
indicators<-dbGetQuery(con,'
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name = ','"', country$name)
print(update)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =','"', country$name, 'spa')
print(update)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =','"',country$name, 'spa')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =''',country$name, 'spa')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =' ' ',country$name, 'spa')
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =')
print(update)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =',' \t\n\r\v\f',country$name)
print(update)
country$name <- gsub(" ", "", country$name, fixed = TRUE)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =',country$name)
print(update)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =','"',country$name)
print(update)
country$name <- paste('"',country$name, '"' )
for (row in country ){
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =','"'country$name)
print(update)
#dbGetQuery(con, update)
}
country$name <- paste('"',country$name,'"')
country$name
country$name <- paste("'",country$name,'"')
country$name
country$name <- gsub(" ", "", country$name, fixed = TRUE)
country$name
country$name <- paste("' ",country$name,'"')
country$name
country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
country$name
country$name <- gsub(" ", "", country$name, fixed = TRUE)
country$name
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =',country$name)
print(update)
update<-paste('UPDATE countries SET latitude =', country$latitude, 'WHERE name =',country$name, ';')
print(update)
dbGetQuery(con, update)
dbGetQuery(con, "UPDATE countries SET latitude = -19.015438 WHERE name = Zimbabwe ;")
dbGetQuery(con, "UPDATE countries SET latitude = -19.015438 WHERE name = 'Zimbabwe' ;")
update<-paste('UPDATE countries SET latitude =', country$latitude,',' ,'longitude=', country$longitude,'WHERE name =',country$name, ';')
print(update)
cat(country$name)
country$name <- gsub(country$name, ""country$name"", country$name, fixed = TRUE)
country$name <- gsub(country$name, "'"country$name"'", country$name, fixed = TRUE)
(country$name)
update<-paste('UPDATE countries SET latitude =', country$latitude,',' ,'longitude=', country$longitude,'WHERE name =',country$name, ';')
print(update)
dbGetQuery(con, "UPDATE countries SET latitude = 42.546245 , longitude= 1.601554 WHERE name = 'Andorra' ;
UPDATE countries SET latitude = 23.424076 , longitude= 53.847818 WHERE name = 'UnitedArabEmirates';
UPDATE countries SET latitude = 33.93911 , longitude= 67.709953 WHERE name = 'Afghanistan';
UPDATE countries SET latitude = 17.060816 , longitude= -61.796428 WHERE name = 'AntiguaandBarbuda';")
dbGetQuery(con, "UPDATE countries SET latitude = 42.546245 , longitude= 1.601554 WHERE name = 'Andorra' ; "
)
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
#country$name <- gsub(country$name, "'"country$name"'", country$name, fixed = TRUE)
#for (row in country ){
# update<-paste('UPDATE countries SET latitude =', country$latitude,',' ,'longitude=', country$longitude,'WHERE name =',country$name, ';')
# print(update)
dbGetQuery(con, "UPDATE countries SET latitude = 42.546245 , longitude= 1.601554 WHERE name = 'Andorra' ; "
)
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
#country$name <- gsub(country$name, "'"country$name"'", country$name, fixed = TRUE)
#for (row in country ){
# update<-paste('UPDATE countries SET latitude =', country$latitude,',' ,'longitude=', country$longitude,'WHERE name =',country$name, ';')
# print(update)
dbGetQuery(con, "UPDATE countries SET latitude = 42.546245 , longitude= 1.601554 WHERE name = 'Andorra'; "
)
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#country<-read.csv("C:/Users/LuciaFalcinelli/Desktop/countries.csv", , header = TRUE)
#country$name <- gsub(country$name, "'"country$name"'", country$name, fixed = TRUE)
#for (row in country ){
# update<-paste('UPDATE countries SET latitude =', country$latitude,',' ,'longitude=', country$longitude,'WHERE name =',country$name, ';')
# print(update)
dbGetQuery(con, "UPDATE countries SET latitude = 23.424076 , longitude= 53.847818 WHERE name = 'UnitedArabEmirates'; "
)
runApp()
runApp()
runApp()
runApp()
quit()
shiny::runApp()
install.packages("shinyjs")
packrat::restore
packrat::restore()
packrat::snapshot()
