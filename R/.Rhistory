LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
indicators$group_name <- as.factor(indicators$group_name)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_map<-indicators %>% group_by(countries_name, group_name, latitude, longitude) %>% summarise('indicator_num'= n())
indicators_map$color_group <-indicators_map %>% data_color(
columns = vars(group_name),
colors = scales::col_numeric(
palette = c(
"red", "orange", "green", "blue", "green", "blue"),
domain = c(0.2E7, 0.4E7))
)
list(!!get(indicators_map$group_name) == "Asylum Seekers" ~ "#08306b",
!!get(indicators_map$group_name) == "IDPs" ~ "#08519c",
!!get(indicators_map$group_name) == "IDPs (in camps or settlements)" ~ "#2171b5",
!!get(indicators_map$group_name) == "IDPs (not in camp or settlements)" ~ "#4292c6",
!!get(indicators_map$group_name) == "Mixed" ~ "#6baed6",
!!get(indicators_map$group_name) == "Refugees" ~ "#9ecae1"
)
#indicators<-merge(indicators, indicators_num, by= c('countries_name', 'group_name'))
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
indicators_map$color_group <-indicators_map %>% data_color(
columns = vars(group_name),
colors = scales::col_numeric(
palette = c(
"red", "orange", "green", "blue", "green", "blue"),
domain = c(0.2E7, 0.4E7))
)
palette_group$group_name <- unique(indicators_map$group_name)
library(DBI)
library(DT)
library(maps)
library(dplyr)
library(paletteer)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
indicators$group_name <- as.factor(indicators$group_name)
##get years list for the slider range bar
years<-indicators$year
##add number indicators for each country
indicators_map<-indicators %>% group_by(countries_name, group_name, latitude, longitude) %>% summarise('indicator_num'= n())
palette_group$group_name <- unique(indicators_map$group_name)
list(!!get(indicators_map$group_name) == "Asylum Seekers" ~ "#08306b",
!!get(indicators_map$group_name) == "IDPs" ~ "#08519c",
!!get(indicators_map$group_name) == "IDPs (in camps or settlements)" ~ "#2171b5",
!!get(indicators_map$group_name) == "IDPs (not in camp or settlements)" ~ "#4292c6",
!!get(indicators_map$group_name) == "Mixed" ~ "#6baed6",
!!get(indicators_map$group_name) == "Refugees" ~ "#9ecae1"
)
#indicators<-merge(indicators, indicators_num, by= c('countries_name', 'group_name'))
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- unique(setNames(indicators$group_name,as.character(indicators$group_name)))
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
palette_group$group_name <- unique(indicators_map$group_name)
palette_group['group_name'] <- unique(indicators_map$group_name)
palette_group<-
palette_group<- unique(indicators_map$group_name)
palette_group[color]<-c("#08306b","#08519c")
palette_group[color]<-c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1")
palette_group<- unique(indicators_map$group_name)
palette_group<- unique(indicators_map$group_name) %>% mutate(color = c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1"))
palette_group[color]<-c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1")
palette_group['color']<-c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1")
palette_group<- unique(indicators_map$group_name)
palette_group['color']<-c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1")
palette_group<- (indicators_map$group_name)
palette_group<- unique(palette_group)
palette_group['color']<-c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1")
palette_group<- unique(palette_group)
palette_group<- (indicators_map$group_name)
palette_group<-data.frame('group_name' = unique(indicators_map$group_name), "color"=c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1"))
View(palette_group)
indicators_map %>% merge(x=indicators_map, y=palette_group, by=group_name, all.x=TRUE)
indicators_map <- merge(x=indicators_map, y=palette_group, by=group_name, all.x=TRUE)
indicators_map <- merge(x=indicators_map, y=palette_group, by=indicators_map$group_name, all.x=TRUE)
indicators_map <- merge(x=indicators_map, y=palette_group, by="group_name", all.x=TRUE)
runApp()
palette_group <- data.frame('group_name' = unique(indicators_map$group_name), "color"=c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1"),
'latitude'= c(-1,0,0,1,1,-1), 'longitudine'= c(0,0,1,1,0,1))
indicators_map <- merge(x=indicators_map, y=palette_group, by="group_name", all.x=TRUE)
##create indicator for the maps included the color for the group
indicators_map <- indicators %>% group_by(countries_name, group_name, latitude, longitude) %>% summarise('indicator_num'= n())
palette_group <- data.frame('group_name' = unique(indicators_map$group_name), "color"=c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1"),
'lat'= c(-1,0,0,1,1,-1), 'long'= c(0,0,1,1,0,1))
indicators_map <- merge(x=indicators_map, y=palette_group, by="group_name", all.x=TRUE)
indicators_map$longitude <- indicators_map$latitude+indicators_map$long
indicators_map$latitude <- indicators_map$latitude+indicators_map$lat
runApp()
runApp()
runApp()
runApp()
runApp()
indicators_map$longitude <- indicators_map$longitude+indicators_map$long
runApp()
palette_group <- data.frame('group_name' = unique(indicators_map$group_name), "color"=c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1"),
'lat'= c(1,0,0,1,0,-1), 'long'= c(0,-1,1,1,0,1))
indicators_map <- merge(x=indicators_map, y=palette_group, by="group_name", all.x=TRUE)
indicators_map$latitude <- indicators_map$latitude+indicators_map$lat
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(lng = indicators_map$longitude,
lat = indicators_map$latitude, radius = 10, stroke=FALSE, color = indicators_map$color,
fillOpacity = 0.6,
popup = paste("<h5><b>Country:</b>",
indicators_map$countries_name, "</h5>",
"<h5><b>Subset:</b>",
indicators_map$group_name,
"<h5><b>Indicators n:</b>", indicators_map$indicator_num , "</h5>"
)) %>%
addLegend("bottomright",colors = unique(indicators_map$color),
labels = unique(indicators_map$group_name),
opacity = 0.6,
# position = "bottomright",
)
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(lng = indicators_map$longitude,
lat = indicators_map$latitude, radius = 10, stroke=FALSE, color = indicators_map$color,
fillOpacity = 0.6,
popup = paste("<h5><b>Country:</b>",
indicators_map$countries_name, "</h5>",
"<h5><b>Subset:</b>",
indicators_map$group_name,
"<h5><b>Indicators n:</b>", indicators_map$indicator_num , "</h5>"
)) %>%
addLegend("bottomright",
colors = unique(indicators_map$color),
labels = unique(indicators_map$group_name),
opacity = 0.6,
# position = "bottomright",
)
runApp()
runApp()
leafletProxy("mymap") %>%
setView(lng = 0, lat = 0, zoom = 2.5) %>%
#clearMarkers() %>%
addCircleMarkers(lng = indicators_map$longitude,
lat = indicators_map$latitude, radius = 10, stroke=FALSE, color = indicators_map$color,
fillOpacity = 0.6,
popup = paste("<h5><b>Country:</b>",
indicators_map$countries_name, "</h5>",
"<h5><b>Subset:</b>",
indicators_map$group_name,
"<h5><b>Indicators n:</b>", indicators_map$indicator_num , "</h5>"
)) %>%
addLegend("bottomright",
colors = unique(indicators_map$color),
labels = unique(indicators_map$group_name),
opacity = 0.6,
position = bottom
)
subsets_list <- sort(unique(setNames(indicators$group_name,as.character(indicators$group_name))))
runApp()
charts <-ggplot(data = ChartGroupsSdg(), aes(x=year, y=indicator_value)) +
geom_line(aes(color = group_name, linetype= group_name, fill="SDGs")) +
geom_point(aes(color = group_name), size = 3, alpha = 0.75) +
labs(y="sdg indicators", x = "years")+
ggtitle("SDG Indicator by indicator") +
scale_x_continuous(breaks=years)+
scale_y_continuous(limits =c(0,1))+
scale_linetype("SubSet")
runApp()
runApp()
library("xlsx")
install.packages("xlsx")
library("xlsx")
source("data.R")
write.xlsx(indicators, file = 'indicators.xls', sheetName ="indicators",
col.names = TRUE, row.names = TRUE, append= FALSE)
library("xlsx")
source("data.R")
write.xlsx(indicators, file = 'indicators.xlsx', sheetName ="indicators",
col.names = TRUE, row.names = TRUE, append= FALSE)
library(DBI)
library(dotenv)
#Include databasename, user and password
load_dot_env(file = "../.env")
con <-  DBI::dbConnect(RMySQL::MySQL(),
dbname = Sys.getenv('DB_DATABASE'),
host = Sys.getenv('DB_HOST'),
port = as.numeric(Sys.getenv('DB_PORT')),
user = Sys.getenv('DB_USERNAME'),
password = Sys.getenv('DB_PASSWORD')
)
install.packages(c("dplyr", "DT", "maps"))
library(shiny)
library(shiny)
install.packages(c("dplyr", "DT", "leaflet", "rgdal", "shinyjs"))
packrat::restore()
install.packages(c("dplyr", "DT", "leaflet", "rgdal", "shinyjs"))
install.packages(c("dplyr", "DT", "maps"))
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
#limit to 50 characters the description for the sdg_description
description_limited<-indicators$sdg_description
substring(sdg_list, 0, 50)
sdg_list<-substring(sdg_list, 0, 50)
sdg_list <- append((sdg_list), 'Select All', after = 0)
sdg_code_list <- unique(indicators$sdg_code)
runApp()
library(DBI)
library(DT)
library(maps)
library(dplyr)
source('dbConfig.R')
#indicators
indicators<-dbGetQuery(con,'
SELECT
indicators.dataset_id,
indicators.group_name,
indicators.subgroup_name,
indicators.sdg_indicator_id,
indicators.indicator_value,
datasets.region,
datasets.country_code,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
countries.longitude,
countries.latitude,
sdg_indicators.code as sdg_code,
sdg_indicators.description as sdg_description
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
indicators$countries_name <- as.factor(indicators$countries_name )
indicators$year <- as.numeric(indicators$year)
indicators$latitude <- as.numeric(indicators$latitude)
indicators$longitude <- as.numeric(indicators$longitude)
indicators$group_name <- as.factor(indicators$group_name)
##get years list for the slider range bar
years<-indicators$year
##create indicator for the maps included the color for the group
indicators_map <- indicators %>% group_by(countries_name, group_name, subgroup_name, latitude, longitude) %>% summarise('indicator_num'= n())
palette_group <- data.frame('group_name' = unique(indicators_map$group_name), "color"=c("#08306b","#08519c", "#2171b5", "#4292c6", "#6baed6", "#9ecae1"),
'lat'= c(0.5,0,0,0.5,0,-0.5), 'long'= c(0,-0.5,0.5,0.5,0,0.5))
indicators_map <- merge(x=indicators_map, y=palette_group, by="group_name", all.x=TRUE)
indicators_map$latitude <- indicators_map$latitude+indicators_map$lat
indicators_map$longitude <- indicators_map$longitude+indicators_map$long
#list of countries, sdg and sdg_code for the filters
countries_list <- setNames(indicators$country_code,as.character(indicators$countries_name))
subsets_list <- sort(unique(setNames(indicators$group_name,as.character(indicators$group_name))))
subsets_list <- append(as.character(subsets_list), 'Select All', after = 0)
#limit to 50 characters the description for the sdg_description
description_limited<-indicators$sdg_description
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(indicators$sdg_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_list<-substring(sdg_list, 0, 50)
sdg_list <- append((sdg_list), 'Select All', after = 0)
sdg_code_list <- unique(indicators$sdg_code)
#data to display in the table
data_table <- dbGetQuery(con,'
SELECT
indicators.group_name,
indicators.indicator_value,
datasets.region,
datasets.year,
datasets.description,
datasets.population_definition,
datasets.source_url,
datasets.comment,
countries.name as countries_name,
sdg_indicators.code as sdg_code
FROM indicators
LEFT JOIN datasets on indicators.dataset_id = datasets.id
LEFT JOIN countries on datasets.country_code = countries.ISO_code
LEFT JOIN sdg_indicators on indicators.sdg_indicator_id = sdg_indicators.id;
')
dbDisconnect(con)
runApp()
#limit to 50 characters the description for the sdg_description
sdg_list<-substring(sdg_list, 0, 50)
sdg_list
#limit to 50 characters the description for the sdg_description
sdg_list<-substring(sdg_list, 0, 10)
sdg_list
#limit to 50 characters the description for the sdg_description
sdg_list<-substring(indicators$sdg_description, 0, 10)
sdg_list
#limit to 50 characters the description for the sdg_description
sdg_list<-substring(indicators$sdg_description, 0, 50)
sdg_list
#limit to 50 characters the description for the sdg_description
limited_description<-substring(indicators$sdg_description, 0, 50)
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
runApp()
#limit to 50 characters the description for the sdg_description
limited_description<-substring(indicators$sdg_description, 0, 30)
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_list <- append((sdg_list), 'Select All', after = 0)
sdg_code_list <- unique(indicators$sdg_code)
runApp()
#limit to 50 characters the description for the sdg_description
limited_description<-substring(indicators$sdg_description, 0, 35)
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_list <- append((sdg_list), 'Select All', after = 0)
sdg_code_list <- unique(indicators$sdg_code)
#limit to 50 characters the description for the sdg_description
limited_description<-substring(indicators$sdg_description, 0, 35)
limited_description<-paste(limited_description, '[...]')
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_list <- append((sdg_list), 'Select All', after = 0)
sdg_code_list <- unique(indicators$sdg_code)
runApp()
limited_description<-substring(indicators$sdg_description, 0, 35)
if(str_lenght(indicators$sdg_description)==35){
limited_description<-paste(limited_description, '[...]')
}
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
sdg_list[!is.na(sdg_list)]
sdg_list <- sort(sdg_list)
sdg_list <- append((sdg_list), 'Select All', after = 0)
sdg_code_list <- unique(indicators$sdg_code)
runApp()
if(str_length(indicators$sdg_description)==35){
limited_description<-paste(limited_description, '[...]')
}
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
if(stri_length(indicators$sdg_description)==35){
limited_description<-paste(limited_description, '[...]')
}
if(stri_length(indicators$sdg_description)==35){
limited_description<-paste(limited_description, '[...]')
}
stri_length(c('abc', '123', '\u0105\u0104'))
library(stringi)
library(stringi)
if(stri_length(indicators$sdg_description)==35){
limited_description<-paste(limited_description, '[...]')
}
stri_length(c('abc', '123', '\u0105\u0104'))
foreach(i=1:nrow(limited_description)) %do%
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
foreach(y=x[-p], .combine=c) %:% when(y <= x[p]) %do% y
limited_description<-substring(indicators$sdg_description, 0, 35)
for(i in 1:nrow(limited_description)){
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
}
for(i in 1:nrow(indicators$sdg_description)){
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
}
limited_description<-substring(indicators$sdg_description, 0, 35)
for(i in 1:nrow(indicators$sdg_description)){
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
}
for(i in 1:nrow(indicators$sdg_description)){
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
}
for(i in 1:length(indicators$sdg_description)){
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
}
for(i in 1:length(indicators$sdg_description)){
if(stri_length(indicators$sdg_description[i])==35){
limited_description<-paste(limited_description, '[...]')
}
}
runApp()
if(length(indicators$sdg_description[i])>34){
limited_description<-paste(limited_description, '[...]')
}
runApp()
limited_description<-substring(indicators$sdg_description, 0, 30)
for(i in 1:length(indicators$sdg_description)){
if(length(indicators$sdg_description[i])34){
limited_description<-paste(limited_description, '[...]')
}
}
sdg_list <- setNames(unique(indicators$sdg_code),as.character(paste(unique(indicators$sdg_code), unique(limited_description), sep=': ')))
length(indicators$sdg_description[i])<25
for(i in 1:length(indicators$sdg_description)){
if(length(indicators$sdg_description[i])<25){
length(indicators$sdg_description[i])<25
limited_description<-paste(limited_description, '[...]')
}
}
for(i in 1:length(indicators$sdg_description)){
if(length(indicators$sdg_description[i])<25){
print(length(indicators$sdg_description[i])<25))
limited_description[i]<-paste(limited_description[i], '[...]')
}
}
limited_description<-substring(indicators$sdg_description, 0, 30)
for(i in 1:length(indicators$sdg_description)){
if(length(indicators$sdg_description[i])<25){
limited_description[i]<-paste(limited_description[i], '[...]')
}
}
runApp()
palette_indicators = c("#e5243b", "#dda83a", "#4c9f38", '#c5192d',
"#ff3a21", "#26bde2", "#fcc30b", '#a21942',
"#fd6925", "#dd1367", "#fd9d24", '#bf8b2e',
"#3f7e44", '#0a97d9', '#56c02b', '#00689d', '#19486a')
shiny::runApp()
shiny::runApp('~/GitHub/ukrainesurvey')
install.packages(c("mapview", "shinythemes"))
runApp('~/GitHub/ukrainesurvey')
runApp('~/GitHub/ukrainesurvey')
runApp('C:/Users/LuciaFalcinelli/Desktop')
shiny::runApp('C:/Users/LuciaFalcinelli/Desktop')
runApp()
shiny::runApp()
shiny::runApp()
runApp('C:/Users/LuciaFalcinelli/Desktop')
